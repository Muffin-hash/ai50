import math
import copy

# Constants
X = "X"
O = "O"
EMPTY = None

def player(board):
    """
    Returns the player who has the next turn on a board.
    X starts first, so count the number of X's and O's to decide the next player.
    """
    # Count the number of X's and O's on the board
    x_count = sum(row.count(X) for row in board)
    o_count = sum(row.count(O) for row in board)

    # If it's X's turn
    if x_count > o_count:
        return O
    else:
        return X

def actions(board):
    """
    Returns a set of all possible actions (i, j) available on the board.
    Each action is represented by a tuple (i, j) where 'i' is the row and 'j' is the column.
    """
    possible_actions = set()
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                possible_actions.add((i, j))
    return possible_actions

def result(board, action):
    """
    Returns the board that results from making move (i, j) on the board.
    Raises an exception if the action is not valid.
    """
    i, j = action
    if board[i][j] is not EMPTY:
        raise Exception("Invalid action")

    # Copy the board to avoid modifying the original
    new_board = copy.deepcopy(board)
    new_board[i][j] = player(board)  # Assign the current player's move
    return new_board

def winner(board):
    """
    Returns the winner of the game, if there is one.
    Returns X if X has won, O if O has won, None otherwise.
    """
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        # Check rows
        if board[i][0] == board[i][1] == board[i][2] and board[i][0] is not EMPTY:
            return board[i][0]
        # Check columns
        if board[0][i] == board[1][i] == board[2][i] and board[0][i] is not EMPTY:
            return board[0][i]

    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] is not EMPTY:
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] is not EMPTY:
        return board[0][2]

    return None

def terminal(board):
    """
    Returns True if the game is over (either a player has won or there are no moves left), False otherwise.
    """
    # If there's a winner, the game is over
    if winner(board) is not None:
        return True

    # If there are no empty spaces, the game is over (tie)
    if all(cell is not EMPTY for row in board for cell in row):
        return True

    # Game is still ongoing
    return False

def utility(board):
    """
    Returns the utility of the board:
    1 if X has won, -1 if O has won, 0 for a tie.
    Assumes the game is over (terminal state).
    """
    win = winner(board)
    if win == X:
        return 1
    elif win == O:
        return -1
    else:
        return 0

def minimax(board):
    """
    Returns the optimal action for the current player on the board.
    If the board is a terminal board, returns None.
    """

    def max_value(board):
        if terminal(board):
            return utility(board)
        v = -math.inf
        for action in actions(board):
            v = max(v, min_value(result(board, action)))
        return v

    def min_value(board):
        if terminal(board):
            return utility(board)
        v = math.inf
        for action in actions(board):
            v = min(v, max_value(result(board, action)))
        return v

    # If the game is already over, return None
    if terminal(board):
        return None

    # Get the current player
    current_player = player(board)

    # Find the optimal action for X (maximizing player)
    if current_player == X:
        best_value = -math.inf
        best_action = None
        for action in actions(board):
            action_value = min_value(result(board, action))
            if action_value > best_value:
                best_value = action_value
                best_action = action
        return best_action

    # Find the optimal action for O (minimizing player)
    else:
        best_value = math.inf
        best_action = None
        for action in actions(board):
            action_value = max_value(result(board, action))
            if action_value < best_value:
                best_value = action_value
                best_action = action
        return best_action
